// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
}
 
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
 
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}
 
model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
 
  @@unique([identifier, token])
}

model NobleUser {
  id          String           @id
  name        String
  guilds      Guild[]          @relation(name: "NobleUserToGuilds")
  voiceEvents UserVoiceEvent[] @relation(name: "NobleUserToUserVoiceEvent")
  songs       Song[]           @relation(name: "NobleUserToSong")
  musics      Music[]          @relation(name: "NobleUserToMusic")
  playlists   Playlist[]       @relation(name: "NobleUserToPlaylist")
}

model Guild {
  id          String            @id
  name        String
  users       NobleUser[]       @relation(name: "NobleUserToGuilds")
  songs       Song[]            @relation(name: "GuildsToSong")
  voiceEvents GuildVoiceEvent[] @relation(name: "GuildToGuildVoiceEvent")
  musics      Music[]           @relation(name: "GuildToMusic")
  playlists   Playlist[]        @relation(name: "GuildToPlaylist")
  usersEvents UserVoiceEvent[]  @relation(name: "GuildToUserVoiceEvent")
  ownerId     String
}

model UserVoiceEvent {
  id      Int       @id @default(autoincrement())
  type    String
  user    NobleUser @relation(name: "NobleUserToUserVoiceEvent", fields: [userId], references: [id])
  userId  String    @unique
  songId  Int
  song    Song      @relation(name: "UserVoiceEventToSong", fields: [songId], references: [id])
  guild   Guild     @relation(name: "GuildToUserVoiceEvent", fields: [guildId], references: [id])
  guildId String
  isActive Boolean
}

model Song {
  id              Int              @id @default(autoincrement())
  title           String
  duration        DateTime
  author          NobleUser        @relation(name: "NobleUserToSong", fields: [authorId], references: [id])
  authorId        String
  guild           Guild            @relation(name: "GuildsToSong", fields: [guildId], references: [id])
  guildId         String
  userVoiceEvents UserVoiceEvent[] @relation(name: "UserVoiceEventToSong")
  guildvoiceevent GuildVoiceEvent? @relation(name: "SongToGuildVoiceEvent")
}

model GuildVoiceEvent {
  id      Int    @id @default(autoincrement())
  type    String
  guild   Guild  @relation(name: "GuildToGuildVoiceEvent", fields: [guildId], references: [id])
  guildId String
  song    Song   @relation(name: "SongToGuildVoiceEvent", fields: [songId], references: [id])
  songId  Int    @unique
  isActive Boolean
}

model Music {
  id        Int        @id @default(autoincrement())
  title     String
  artist    String?
  duration  DateTime
  author    NobleUser  @relation(name: "NobleUserToMusic", fields: [authorId], references: [id])
  authorId  String
  guild     Guild      @relation(name: "GuildToMusic", fields: [guildId], references: [id])
  guildId   String
  playlists Playlist[] @relation(name: "MusicToPlaylist")
}

model Playlist {
  id       Int       @id @default(autoincrement())
  name     String
  musics   Music[]   @relation(name: "MusicToPlaylist")
  author   NobleUser @relation(name: "NobleUserToPlaylist", fields: [authorId], references: [id])
  authorId String
  guild    Guild     @relation(name: "GuildToPlaylist", fields: [guildId], references: [id])
  guildId  String
}
