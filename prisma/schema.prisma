// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
}
 
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
 
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}
 
model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
 
  @@unique([identifier, token])
}

model AdvertGuild {
  id                      String @id
  
  name                    String
  durationLimit           DateTime?
  
  songs                   AdvertSong[]        @relation(name: "song.guildId")
  users                   AdvertUser[]        @relation(name: "userguilds")
  adverts                 Advert[]            @relation(name: "advert.guildId")
  events                  AdvertGuildEvent[]  @relation(name: "event.guildId")
}

model AdvertSong {
  id                    String                @id @default(cuid())

  title                 String
  duration              DateTime?
  defaultVolume         Float
  isGlobal              Boolean               @default(false)

  guildId               String    
  authorId              String    

  createAt              DateTime              @default(now())

  guild                 AdvertGuild           @relation(name: "song.guildId",fields: [guildId], references: [id], onDelete: Cascade)
  author                AdvertUser            @relation(name:"song.authorId",fields: [authorId], references: [id])
  adverts               Advert[]              @relation(name: "advert.dongId")
  events                AdvertGuildEvent[]    @relation(name: "event.songId")
}

model AdvertUser {
  id        String @id
  name      String
  
  guilds    AdvertGuild[] @relation(name: "userguilds")
  songs     AdvertSong[]  @relation(name: "song.authorId")
  adverts   Advert[]      @relation(name: "advert.userId")
}

model Advert {
  id        String @id @default(cuid())
  
  active    Boolean @default(true)
  
  guildId   String
  userId    String
  songId    String
  
  guild     AdvertGuild @relation(name: "advert.guildId",fields: [guildId], references: [id], onDelete: Cascade)
  user      AdvertUser @relation(name: "advert.userId",fields: [userId], references: [id], onDelete: Cascade)
  song      AdvertSong  @relation(name: "advert.dongId",fields: [songId], references: [id], onDelete: Cascade)
}

model AdvertGuildEvent {
  id      String @id @default(cuid())

  name    String
  songId  String
  guildId String

  guild   AdvertGuild @relation(name: "event.guildId",fields: [guildId], references: [id])
  song    AdvertSong @relation(name: "event.songId",fields: [songId], references: [id])
}